1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

This is because the hardware does not distinguish the errors which caused the exceptions to be called. Therefore, we create individual exception handlers to push the error codes and allow for specialized treatment of the exceptions. For instance, in some cases, we push $0x0 onto the stack, and in other cases we do not.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

No, we did not have to do anything to make softint behave correctly. This is because we should NOT allow users to invoke exceptions of their choice. If they could predict an exception being called, they could put in malicious code on the stack, which the kernel would then read out and execute with kernel privileges. We instead trigger interrupt 13 since the user program attempted to violate its privileges.

3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

The break point test requires that the breakpoint trap be set with user privileges. Therefore I had to put DPL = 3 for the SETGATE command to set the breakpoint trap. The reason the general protection fault gets invoked if we only give DPL = 0 is because the user does not have correct privileges to invoke this exception. This is part of the protection scheme we use.


4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

These mechanisms enforce permissions. They create a "gate" for which the user can make calls to the system via exceptions. Some of these gates are accessible to the users, while others are not. This protects against malicious user code.
